/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    users: User;
    media: Media;
    records: Record;
    artists: Artist;
    genres: Genre;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  globals: {
    'site-settings': SiteSetting;
  };
}
export interface User {
  id: string;
  name?: string;
  role: 'admin' | 'user';
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string;
  resetPasswordExpiration?: string;
  salt?: string;
  hash?: string;
  loginAttempts?: number;
  lockUntil?: string;
  password: string;
}
export interface Media {
  id: string;
  alt?: string;
  updatedAt: string;
  createdAt: string;
  url?: string;
  filename?: string;
  mimeType?: string;
  filesize?: number;
  width?: number;
  height?: number;
}
export interface Record {
  id: string;
  title: string;
  slug?: string;
  artist: string[] | Artist[];
  label?: string;
  genres: string[] | Genre[];
  releaseYear?: string;
  useCustomImage?: boolean;
  image?: string | Media;
  imageUrl?: string;
  favouriteTracks?: {
    title: string;
    notes?: string;
    id?: string;
  }[];
  createdBy?: string | User;
  themeColor?: string;
  content?: {
    [k: string]: unknown;
  }[];
  status?: 'draft' | 'published';
  updatedAt: string;
  createdAt: string;
}
export interface Artist {
  id: string;
  name: string;
  slug?: string;
  genres?: string[] | Genre[];
  useCustomImage?: boolean;
  image?: string | Media;
  imageUrl?: string;
  themeColor?: string;
  discogsBio?: string;
  content?: {
    [k: string]: unknown;
  }[];
  status?: 'draft' | 'published';
  updatedAt: string;
  createdAt: string;
}
export interface Genre {
  id: string;
  title: string;
  slug?: string;
  updatedAt: string;
  createdAt: string;
}
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
export interface PayloadMigration {
  id: string;
  name?: string;
  batch?: number;
  updatedAt: string;
  createdAt: string;
}
export interface SiteSetting {
  id: string;
  title: string;
  description: string;
  logo: string | Media;
  updatedAt?: string;
  createdAt?: string;
}


declare module 'payload' {
  export interface GeneratedTypes {
    collections: {
      'users': User
      'media': Media
      'records': Record
      'artists': Artist
      'genres': Genre
      'payload-preferences': PayloadPreference
      'payload-migrations': PayloadMigration
    }
    globals: {
      'site-settings': SiteSetting
    }
  }
}