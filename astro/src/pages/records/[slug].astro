---
import Artist from '@/components/Artist.astro';
import Content from '@/components/Content.astro';
import Record from '@/components/Record.astro';
import RecordArtists from '@/components/RecordArtists.astro';
import RecordImage from '@/components/RecordImage.astro';
import Layout from '@/layouts/Layout.astro';
import type {
  Artist as ArtistType,
  Genre,
  Record as RecordType
} from '@/types';
import { getThemeColors, invertHex } from '@/utils/helpers';
import { getRecords, getSimilarRecordsByGenre } from '@/utils/payload/record';
import type { InferGetStaticParamsType } from 'astro';

// TODO: how to get type hints...?

export async function getStaticPaths() {
  const records = await getRecords();

  const paths = records.map((record) => ({
    params: { slug: record.slug?.toString() },
    props: { record }
  }));

  return paths;
}

type Params = InferGetStaticParamsType<typeof getStaticPaths>;

interface Props {
  record: RecordType;
}

// const { slug } = Astro.params as Params;
const { record } = Astro.props;

const artists: ArtistType[] = record.artist;
const genres: Genre[] = record.genres?.map((genre) => genre.title) || [];

const similarRecords = await getSimilarRecordsByGenre(record);

const {
  themeColor,
  invertedThemeColor,
  lightModeTextColor,
  darkModeTextColor
} = getThemeColors(record.themeColor, '#cbcbcb');
---

<!-- <script is:inline src="https://unpkg.com/color.js@1.2.0/dist/color.js"></script> --><!-- TODO: why doesn't this re-run on each page? -->
<script is:inline>
  // when document is ready
  // document.addEventListener('DOMContentLoaded', () => {
  //   const recordImage = document.getElementById('record-image');
  //   const recordImageSrc = recordImage.src;
  //   colorjs.average(recordImageSrc).then((color) => {
  //     console.log(color); // [241, 221, 63]

  //     const rgba = `rgba(${color[0]}, ${color[1]}, ${color[2]}, .2)`;

  //     // set --gradient-light variable
  //     document.documentElement.style.setProperty('--gradient-light', rgba);

  //     // colors.forEach((color) => {
  //     //   const colorEl = document.createElement('div');
  //     //   colorEl.style.backgroundColor = `rgb(${color[0]}, ${color[1]}, ${color[2]})`;
  //     //   colorEl.style.width = '50px';
  //     //   colorEl.style.height = '50px';
  //     //   colorsEl.appendChild(colorEl);
  //     // });
  //   });
  // });
</script>

<!-- !REMEMBER: // comments screw up the CSS -->
<style
  define:vars={{
    themeColor,
    invertedThemeColor,
    lightModeTextColor,
    darkModeTextColor
  }}
>
  h1 {
    color: var(--themeColor);
    /* text-shadow: 0 0.08em var(--invertedThemeColor); */
    /* text-shadow: 0.05em 0 var(--invertedThemeColor); */
  }

  :is(h2:not(.aside-heading), h3, h4, h5, h6, span.label) {
    color: var(--lightModeTextColor);
  }

  html.dark :is(h2:not(.aside-heading), h3, h4, h5, h6, span.label) {
    color: var(--darkModeTextColor);
  }
</style>

<Layout title={record.title}>
  <section class="grid grid-cols-12 items-start gap-2">
    <div class="col-span-full flex flex-col sm:col-span-9 md:col-span-10">
      <h1
        class="relative z-10 -mb-4 ml-1 text-5xl font-black mix-blend-exclusion sm:-mb-6 md:text-7xl"
        transition:animate="fade"
      >
        {record.title}
      </h1>
      <div class="mb-8 flex gap-4 sm:gap-6">
        <div class="w-1/2 flex-grow-0 md:w-1/4">
          <div class="overflow-hidden rounded-sm">
            <RecordImage
              record={record}
              transition:name={`record-${record.id}`}
            />
          </div>
        </div>
        <div class="mt-8 flex flex-col justify-between sm:mt-16">
          <div class="font-mono text-sm">
            <p>
              <span class="label font-mono font-bold tracking-tighter"
                >Artist:
              </span>
              <RecordArtists record={record} class="hocus:underline" />
            </p>
            <p>
              <span class="label font-mono font-bold tracking-tighter"
                >Year:
              </span>{record.releaseYear}
            </p>
            {
              record.label && (
                <p>
                  <span class="label font-mono font-bold tracking-tighter">
                    Label:{' '}
                  </span>
                  {record.label}
                </p>
              )
            }
            {
              genres && (
                <p>
                  <span class="label font-mono font-bold tracking-tighter">
                    Genre(s):{' '}
                  </span>
                  {genres.join(', ')}
                </p>
              )
            }
          </div>
        </div>
      </div>

      <!-- {record.content && <Content heading="About" content={record.content} />} -->
      {record.content && <Content content={record.content} />}

      {
        artists.length && (
          <>
            <h2 class="mb-4 mt-16 text-lg font-bold sm:text-xl">
              Record Artist(s)
            </h2>
            <div class="grid grid-cols-12 gap-4">
              {artists.map((artist) => (
                <div class="col-span-3 sm:col-span-2">
                  <Artist small artist={artist} />
                </div>
              ))}
            </div>
          </>
        )
      }
    </div>

    {
      similarRecords?.length > 0 && (
        <aside class="col-span-full mt-8 rounded-lg bg-black/5 px-5 py-4 dark:bg-white/5 sm:col-span-3 sm:mt-0 md:col-span-2">
          <h2 class="aside-heading mb-4 text-center font-bold">
            Similar Records
          </h2>
          <div class="grid grid-cols-2 gap-4 sm:flex sm:flex-col sm:items-center sm:gap-7">
            {similarRecords.map((record, idx) => (
              <div class={`${idx === 2 && 'hidden sm:block'}`}>
                <Record small record={record} class="flex-1" />
              </div>
            ))}
          </div>
        </aside>
      )
    }
  </section>
</Layout>
