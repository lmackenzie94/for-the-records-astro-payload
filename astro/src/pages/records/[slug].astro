---
import Artist from '@/components/Artist.astro';
import Content from '@/components/Content.astro';
import Record from '@/components/Record.astro';
import RecordArtists from '@/components/RecordArtists.astro';
import RecordImage from '@/components/RecordImage.astro';
import Layout from '@/layouts/Layout.astro';
import type {
  Artist as ArtistType,
  Genre,
  Record as RecordType
} from '@/types';
import { getRecords, getRecordsBySimilarGenre } from '@/utils/payload/record';
import type { InferGetStaticParamsType } from 'astro';

// TODO: how to get type hints...?

export async function getStaticPaths() {
  const records = await getRecords();

  const paths = records.map((record) => ({
    params: { slug: record.slug?.toString() },
    props: { record }
  }));

  return paths;
}

type Params = InferGetStaticParamsType<typeof getStaticPaths>;

interface Props {
  record: RecordType;
}

// const { slug } = Astro.params as Params;
const { record } = Astro.props;

const artists: ArtistType[] = record.artist;
const genres: Genre[] = record.genres?.map((genre) => genre.title) || [];

const similarRecords = await getRecordsBySimilarGenre(record);
---

<script is:inline src="https://unpkg.com/color.js@1.2.0/dist/color.js"></script>

<!-- TODO: why doesn't this re-run on each page? -->
<script is:inline>
  // when document is ready
  // document.addEventListener('DOMContentLoaded', () => {
  //   const recordImage = document.getElementById('record-image');
  //   const recordImageSrc = recordImage.src;
  //   colorjs.average(recordImageSrc).then((color) => {
  //     console.log(color); // [241, 221, 63]

  //     const rgba = `rgba(${color[0]}, ${color[1]}, ${color[2]}, .2)`;

  //     // set --gradient-light variable
  //     document.documentElement.style.setProperty('--gradient-light', rgba);

  //     // colors.forEach((color) => {
  //     //   const colorEl = document.createElement('div');
  //     //   colorEl.style.backgroundColor = `rgb(${color[0]}, ${color[1]}, ${color[2]})`;
  //     //   colorEl.style.width = '50px';
  //     //   colorEl.style.height = '50px';
  //     //   colorsEl.appendChild(colorEl);
  //     // });
  //   });
  // });
</script>

<Layout title={record.title}>
  <section class="grid grid-cols-12 items-start">
    <div class="col-span-full flex flex-col md:col-span-10">
      <h1
        class="relative z-10 -mb-6 ml-1 text-7xl font-black text-[#c5c5c5] mix-blend-exclusion dark:text-[#f8f8f8]"
        transition:animate="fade"
      >
        {record.title}
      </h1>
      <div class="mb-8 flex gap-6">
        <div class="w-1/4 flex-grow-0">
          <div class="overflow-hidden rounded-sm">
            <RecordImage
              id="record-image"
              record={record}
              transition:name={`record-${record.id}`}
            />
          </div>
        </div>
        <div class="mt-16 flex flex-col justify-between">
          <div class="font-mono text-sm">
            <p>
              <span class="font-mono font-bold tracking-tighter text-gray-light"
                >Artist:
              </span>
              <RecordArtists record={record} class="hocus:underline" />
            </p>
            <p>
              <span class="font-mono font-bold tracking-tighter text-gray-light"
                >Year:
              </span>{record.releaseYear}
            </p>
            {
              record.label && (
                <p>
                  <span class="font-mono font-bold tracking-tighter text-gray-light">
                    Label:{' '}
                  </span>
                  {record.label}
                </p>
              )
            }
            {
              genres && (
                <p>
                  <span class="font-mono font-bold tracking-tighter text-gray-light">
                    Genre(s):{' '}
                  </span>
                  {genres.join(', ')}
                </p>
              )
            }
          </div>
        </div>
      </div>

      <!-- <Content>
        <h2 class="mb-3 text-2xl font-bold">About</h2>
        <p class="w-full sm:w-[85%]">
          Lorem ipsum dolor sit amet consectetur adipisicing elit. Quas
          veritatis repudiandae id eos laborum sint quod. Quae quas ea
          architecto, quam totam exercitationem aliquam reiciendis obcaecati
          corporis at officia quod est non modi! Libero culpa accusamus
          necessitatibus, quae doloribus totam minima veritatis mollitia illum
          recusandae quas reiciendis nisi eos provident obcaecati.
        </p><p>
          Sapiente mollitia ad dolores non debitis necessitatibus velit amet,
          reprehenderit, quasi magnam labore eaque, pariatur eligendi facere
          cumque obcaecati optio vero. Aliquid atque accusamus voluptatem nisi
          pariatur neque labore. Ex quibusdam praesentium illum, voluptate hic
          tenetur unde. Dolores, laboriosam esse! Iusto excepturi placeat ut
          fugit unde itaque eveniet reprehenderit!
        </p>
      </Content> -->

      {
        artists.length && (
          <div class="mt-16 grid grid-cols-12 gap-4">
            {artists.map((artist) => (
              <div class="col-span-3 md:col-span-2">
                <Artist artist={artist} />
              </div>
            ))}
          </div>
        )
      }
    </div>

    {
      similarRecords?.length > 0 && (
        <aside class="col-span-full rounded-lg bg-black/5 px-6 py-4 dark:bg-white/5 md:col-span-2">
          <h2 class="mb-4 text-center font-bold text-black dark:text-[#f8f8f8]">
            Similar Records
          </h2>
          <div class="flex gap-5 md:flex-col md:items-center">
            {similarRecords.map((record) => (
              <div class="col-span-3 md:col-span-2">
                <Record record={record} class="flex-1" />
              </div>
            ))}
          </div>
        </aside>
      )
    }
  </section>
</Layout>
