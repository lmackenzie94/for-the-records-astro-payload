---
import Artist from '@/components/Artist.astro';
import ArtistImage from '@/components/ArtistImage.astro';
import Record from '@/components/Record.astro';
import Layout from '@/layouts/Layout.astro';
import type { Artist as ArtistType, Genre } from '@/types';
import { getArtists, getArtistsBySimilarGenre } from '@/utils/payload/artist';
import { getRecordsByArtist } from '@/utils/payload/record';
import type { InferGetStaticParamsType } from 'astro';

// TODO: how to get type hints...?

export async function getStaticPaths() {
  const artists = await getArtists();

  const paths = artists.map((artist) => ({
    params: { slug: artist.slug?.toString() },
    props: { artist }
  }));

  return paths;
}

type Params = InferGetStaticParamsType<typeof getStaticPaths>;

interface Props {
  artist: ArtistType;
}

// const { slug } = Astro.params as Params;
const { artist } = Astro.props;

const records = await getRecordsByArtist(artist.id);
const genres: Genre[] = artist.genres?.map((genre) => genre.title) || [];
const similarArtists = await getArtistsBySimilarGenre(artist);

function invertHex(hexCode: string) {
  const hex = hexCode.replace('#', '');
  const invertedHex = (Number(`0x1${hex}`) ^ 0xffffff)
    .toString(16)
    .substr(1)
    .toUpperCase();
  return `#${invertedHex}`;
}

const themeColor = artist.themeColor || '#454545';
const themeColorFaded = `${themeColor}15`;
const invertedThemeColor = invertHex(themeColor);
const invertedThemeColorFaded = `${invertedThemeColor}15`;

const formatLinks = (bio, color) => {
  if (!bio) return;
  // convert links to anchor tags (ex. [url=http://www.discogs.com/artist/John+Mayall+%26+The+Bluesbreakers]Bluesbreakers[/url])

  const regex = /\[url=(.+?)\](.+?)\[\/url\]/g;
  const subst = `<a href="$1" style="color: ${color}" target="_blank" rel="noopener noreferrer">$2</a>`;
  const result = bio.replace(regex, subst);

  return result;
};

const discogsBio = formatLinks(artist.discogsBio, invertedThemeColor);
---

<style
  define:vars={{
    themeColor,
    themeColorFaded,
    invertedThemeColor,
    invertedThemeColorFaded
  }}
>
  h1 {
    color: var(--themeColor);
    /* text-shadow: 0 0.08em var(--invertedThemeColor); */
    text-shadow: 0.05em 0 var(--invertedThemeColor);
  }
  h2:not(.similar-artists-heading),
  h3,
  h4 {
    color: var(--themeColor);
  }

  .similar-artists-heading {
    color: var(--invertedThemeColor);
  }

  .similar-artists-container {
    background-color: var(--invertedThemeColorFaded);

    /* border: 1px solid var(--themeColor); */
    /* outline: px solid var(--invertedThemeColor); */
  }

  span.label {
    color: var(--themeColor);
  }
</style>

<Layout title={artist.name}>
  <section class="grid grid-cols-12 items-start">
    <div class="col-span-full flex flex-col md:col-span-10">
      <h1
        class="relative z-10 -mb-6 ml-1 text-7xl font-black mix-blend-exclusion"
        transition:animate="fade"
      >
        {artist.name}
      </h1>

      <div class="mb-8 flex gap-6">
        <div class="w-1/4 flex-grow-0">
          <div class="overflow-hidden rounded-sm">
            <ArtistImage
              artist={artist}
              transition:name={`artist-${artist.id}`}
            />
          </div>
        </div>
        <div class="mt-16 flex flex-col justify-between">
          <div class="font-mono text-sm">
            {
              genres && (
                <p>
                  <span class="label font-mono font-bold tracking-tighter text-gray-light">
                    Genre(s):{' '}
                  </span>
                  {genres.join(', ')}
                </p>
              )
            }
          </div>
        </div>
      </div>

      <!-- <Content>
        <pre>
          {JSON.stringify(artist.content, null, 2)}
        </pre>
      </Content> -->
      {discogsBio && <p class="w-full sm:w-[85%]" set:html={discogsBio} />}

      {
        records.length > 0 && (
          <>
            <h2 class="mb-4 mt-16 text-2xl font-bold">
              Records in Your Collection
            </h2>
            <div class="grid grid-cols-12 gap-4">
              {records.map((record) => (
                <div class="col-span-3 md:col-span-2">
                  <Record record={record} />
                </div>
              ))}
            </div>
          </>
        )
      }
    </div>
    {
      similarArtists?.length > 0 && (
        <aside class="similar-artists-container col-span-full rounded-lg bg-black/10 px-6 py-4 dark:bg-white/5 md:col-span-2">
          <h2 class="similar-artists-heading mb-4 text-center font-bold">
            Similar Artists
          </h2>
          <div class="flex gap-7 md:flex-col md:items-center">
            {similarArtists.map((artist) => (
              <div class="col-span-3 md:col-span-2">
                <Artist artist={artist} class="flex-1" />
              </div>
            ))}
          </div>
        </aside>
      )
    }
  </section>
</Layout>
