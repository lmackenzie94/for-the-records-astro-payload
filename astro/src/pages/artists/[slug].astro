---
import Artist from '@/components/Artist.astro';
import ArtistImage from '@/components/ArtistImage.astro';
import Content from '@/components/Content.astro';
import Record from '@/components/Record.astro';
import Layout from '@/layouts/Layout.astro';
import type { Artist as ArtistType, Genre } from '@/types';
import { getThemeColors } from '@/utils/helpers';
import { getArtists, getSimilarArtistsByGenre } from '@/utils/payload/artist';
import { getRecordsByArtist } from '@/utils/payload/record';
import type { InferGetStaticParamsType } from 'astro';
// TODO: how to get type hints...?

export async function getStaticPaths() {
  const artists = await getArtists();

  const paths = artists.map((artist) => ({
    params: { slug: artist.slug?.toString() },
    props: { artist }
  }));

  return paths;
}

type Params = InferGetStaticParamsType<typeof getStaticPaths>;

interface Props {
  artist: ArtistType;
}

// const { slug } = Astro.params as Params;
const { artist } = Astro.props;

const records = await getRecordsByArtist(artist.id);
const genres: Genre[] = artist.genres?.map((genre) => genre.title) || [];
const similarArtists = await getSimilarArtistsByGenre(artist);

const {
  themeColor,
  invertedThemeColor,
  lightModeTextColor,
  darkModeTextColor,
  themeColorFaded,
  invertedThemeColorFaded
} = getThemeColors(artist.themeColor, '#454545');
---

<!-- !REMEMBER: // comments screw up the CSS -->
<style
  define:vars={{
    themeColor,
    invertedThemeColor,
    lightModeTextColor,
    darkModeTextColor,
    themeColorFaded,
    invertedThemeColorFaded
  }}
>
  h1 {
    color: var(--themeColor);
    /* text-shadow: 0 0.08em var(--invertedThemeColor); */
    /* text-shadow: 0.05em 0 var(--invertedThemeColor); */
  }

  :is(h2:not(.aside-heading), h3, h4, h5, h6, span.label) {
    color: var(--lightModeTextColor);
  }

  html.dark :is(h2:not(.aside-heading), h3, h4, h5, h6, span.label) {
    color: var(--darkModeTextColor);
  }

  .bio {
    background-color: var(--themeColorFaded);

    padding: 1rem;
    border-radius: 0.5rem;
  }

  html.dark .bio {
    background-color: var(--invertedThemeColorFaded);
  }

  .bio :global(a),
  .content :global(a) {
    /* NOTE: only works with :global() because otherwise Astro appends a data-attribute to the selector, which the a elements in the bio don't have */
    color: var(--lightModeTextColor);
    text-decoration: underline;
    font-weight: bolder;
  }

  html.dark .bio :global(a),
  html.dark .content :global(a) {
    color: var(--darkModeTextColor);
  }

  details summary::-webkit-details-marker,
  details summary::marker {
    color: var(--lightModeTextColor);
  }

  html.dark details summary::-webkit-details-marker,
  html.dark details summary::marker {
    color: var(--darkModeTextColor);
  }
</style>

<Layout title={artist.name}>
  <section class="grid grid-cols-12 items-start gap-2">
    <div class="col-span-full flex flex-col sm:col-span-9 md:col-span-10">
      <h1
        class="relative z-10 -mb-4 ml-1 text-5xl font-black mix-blend-exclusion sm:-mb-6 md:text-7xl"
        transition:animate="fade"
      >
        {artist.name}
      </h1>

      <div class="mb-8 flex gap-4 sm:gap-6">
        <div class="w-1/2 flex-grow-0 md:w-1/4">
          <div class="overflow-hidden rounded-sm">
            <ArtistImage
              artist={artist}
              transition:name={`artist-${artist.id}`}
            />
          </div>
        </div>
        <div class="mt-8 flex flex-col justify-between sm:mt-16">
          <div class="font-mono text-sm">
            {
              genres && (
                <p>
                  <span class="label font-mono font-bold tracking-tighter">
                    Genre(s):{' '}
                  </span>
                  {genres.join(', ')}
                </p>
              )
            }
          </div>
        </div>
      </div>

      <!-- <Content>
        <pre>
          {JSON.stringify(artist.content, null, 2)}
        </pre>
      </Content> -->
      {
        artist.discogsBio && (
          <details class="w-full sm:w-[85%]">
            <summary class="font-bold">Discogs Bio</summary>
            <p class="bio mt-2" set:html={artist.discogsBio} />
          </details>
        )
      }

      {artist.content && <Content class="content" content={artist.content} />}

      {
        records.length > 0 && (
          <>
            <h2 class="mb-4 mt-16 text-lg font-bold sm:text-xl">
              Records in Your Collection
            </h2>
            <div class="grid grid-cols-12 gap-4">
              {records.map((record) => (
                <div class="col-span-3 md:col-span-2">
                  <Record small record={record} />
                </div>
              ))}
            </div>
          </>
        )
      }
    </div>
    {
      similarArtists?.length > 0 && (
        <aside class="col-span-full mt-8 rounded-lg bg-black/5 px-5 py-4 dark:bg-white/5 sm:col-span-3 sm:mt-0 md:col-span-2">
          <h2 class="aside-heading mb-4 text-center font-bold">
            Similar Artists
          </h2>
          <div class="grid grid-cols-2 gap-4 sm:flex sm:flex-col sm:items-center sm:gap-7">
            {similarArtists.map((artist, idx) => (
              <div class={`${idx === 2 && 'hidden sm:block'}`}>
                <Artist small artist={artist} class="flex-1" />
              </div>
            ))}
          </div>
        </aside>
      )
    }
  </section>
</Layout>
