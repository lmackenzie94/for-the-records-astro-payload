<div class="flex gap-1">
  <button id="filter-all" class="filter">All</button>
  <button id="filter-own" class="filter">Own</button>
  <button id="filter-want" class="filter">Want</button>
  <button id="filter-like" class="filter">Just Like</button>
</div>

<style>
  .filter {
    @apply self-start rounded-full border-2 border-transparent px-2 font-mono text-xs font-bold tracking-tighter text-black transition-colors duration-300 hocus:border-black dark:text-white dark:hocus:border-white;
  }

  .filter.active {
    @apply border-black bg-black text-white dark:border-white dark:bg-white dark:text-black;
  }
</style>

<script>
  type FilterKeys = 'all' | 'own' | 'want' | 'like';

  interface Filters {
    [key: string]: HTMLButtonElement | null;
  }

  document.addEventListener('astro:page-load', () => {
    const filters: Filters = {
      all: document.querySelector('#filter-all'),
      own: document.querySelector('#filter-own'),
      want: document.querySelector('#filter-want'),
      like: document.querySelector('#filter-like')
    };

    const records = document.querySelectorAll('.record');

    let activeFilter: HTMLButtonElement | null = null;

    const activateFilter = (filter: HTMLButtonElement) => {
      activeFilter?.classList.remove('active');
      filter?.classList.add('active');
      activeFilter = filter;
    };

    const updateURL = (status: FilterKeys) => {
      const url = new URL(window.location.href);

      if (status === 'all') {
        url.searchParams.delete('s');
        window.history.pushState({}, '', url.toString());
        return;
      }

      url.searchParams.set('s', status);
      window.history.pushState({}, '', url.toString());
    };

    const setInitialFilter = () => {
      console.log('SETTING INITIAL FILTER');
      const url = new URL(window.location.href);
      const status = url.searchParams.get('s') as FilterKeys;
      if (status && filters[status]) {
        activateFilter(filters[status]);
        filterRecords(status);
      } else {
        activateFilter(filters.all!);
      }
    };

    const filterRecords = (status: FilterKeys) => {
      activateFilter(filters[status]!);
      updateURL(status);

      records.forEach((record) => {
        if (status === 'all' || record?.dataset?.status === status) {
          record.classList.remove('hidden');
        } else {
          record.classList.add('hidden');
        }
      });
    };

    Object.keys(filters).forEach((filter) => {
      filters[filter as FilterKeys]?.addEventListener('click', () =>
        filterRecords(filter as FilterKeys)
      );
    });

    //! TODO: why does this get called when changing pages? (ex. after clicking one of the records)
    setInitialFilter();
  });
</script>
